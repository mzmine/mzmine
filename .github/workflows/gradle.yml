name: Test Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  gradle_build:
    name: test and build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: 17.0.2

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle build
        run: ./gradlew --stacktrace --info

      # ZIP PORTABLE VERSIONS
      - name: Zip portable windows
        if: matrix.os == 'windows-latest'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/MZmine/
          dest: build/jpackage/MZmine_Windows_portable.zip
      - name: Zip portable linux
        if: matrix.os == 'ubuntu-latest'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/MZmine/
          dest: build/jpackage/MZmine_Linux_portable.zip

      # UPLOAD ALL FILES
      - name: Upload windows builds
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_msi_installer
          path: build/jpackage/*.msi
          retention-days: 7  # store for 7 days
      - name: Upload windows portable builds
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_portable
          path: build/jpackage/MZmine_Windows_portable.zip
          retention-days: 7  # store for 7 days

      - name: Upload builds ubuntu deb
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_deb_package
          path: build/jpackage/*.deb
          retention-days: 7  # store for 7 days
      - name: Upload builds ubuntu rpm
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_rpm_package
          path: build/jpackage/*.rpm
          retention-days: 7  # store for 7 days
      - name: Upload linux portable builds
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_portable
          path: build/jpackage/MZmine_Linux_portable.zip
          retention-days: 7  # store for 7 days



      # for macOS:
      # 1. upload the dmg installer
      # 2. remove the dmg isntaller from path
      # 3. zip and upload the jpackage directory
      # This is needed because zipping of the /jpackage/MZmine.app portable version zips the content
      # of the folder not the folder itself
      - name: Upload builds macos
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macos_dmg_installer
          path: build/jpackage/*.dmg
          retention-days: 7  # store for 7 days

      - name: Remove dmg File and Make .app executable
        if: matrix.os == 'macos-latest'
        run: |
          find ./build/jpackage/ -name '*.dmg' -delete
          chmod a+x build/jpackage/MZmine.app/Contents/MacOS/MZmine
      - name: Zip portable macos
        if: matrix.os == 'macos-latest'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/
          dest: build/jpackage/MZmine_macOS_portable.zip
      - name: Upload macos portable builds
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macos_portable
          path: build/jpackage/MZmine_macOS_portable.zip
          retention-days: 7  # store for 7 days


  # release dev version
  release_dev:
    name: Release dev version
    needs: gradle_build
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2 # download all artifacts
        with:
          path: build/
      - name: Create development release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          prerelease: true
          title: "Latest Development Build"
          automatic_release_tag: "Development-release"
          files: build/*/*

  # bump up patch if dev release finished
  increment_patch:
    name: Increment patch version
    needs: release_dev
    if: ${{ !startsWith(github.ref, 'refs/tags/') }} # only increment if not a tag push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle to increment version
        run: ./gradlew incrementPatch
      - name: Commit updated patch version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Increment patch version
          branch: master

