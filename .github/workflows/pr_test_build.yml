name: PR Test Build

on:
  pull_request:
    branches: [ "master", "actions-test" ]

jobs:
  gradle_build:
    name: test and build
    strategy:
      matrix:
#        os: [ ubuntu-latest, macos-latest, windows-latest ]
        os: [ windows-latest, ubuntu-latest ] # only test on windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23.0.2'
#          cache: 'gradle'  # now done with gradle

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

# requires two secrets just in case: the user license string and
# USER_BASE64 a Base64 encoded version of this
      - name: Create testrunner user file
        env:
          TESTRUNNER_USER: ${{ secrets.TESTRUNNER_USER }}
          USER_BASE64: ${{ secrets.USER_BASE64 }}
        run: |
          mkdir -p $HOME/.mzmine/users/
          echo $HOME/.mzmine/users/
          echo $USER_BASE64 | base64 --decode > $HOME/.mzmine/users/testrunner.mzuserstr
# another option to set env var globally
#          echo "TESTRUNNER_USER_GIT_ENV=$TESTRUNNER_USER" >> "$GITHUB_ENV"

#      in PR, without signing
#      in push to master use signed version for macOS
      - name: Execute Gradle build (unsigned)
        env:
          TESTRUNNER_USER: ${{ secrets.TESTRUNNER_USER }}
        run: ./gradlew -p mzmine-community --info --warning-mode all

      # ZIP PORTABLE VERSIONS
      - name: Zip portable windows
        if: runner.os == 'Windows'
        uses: vimtor/action-zip@v1.2
        with:
          files: mzmine-community/build/jpackage/mzmine/
          dest: mzmine-community/build/jpackage/mzmine_Windows_portable.zip
      - name: Zip portable linux
        if: runner.os == 'Linux'
        uses: vimtor/action-zip@v1.2
        with:
          files: mzmine-community/build/jpackage/mzmine/
          dest: mzmine-community/build/jpackage/mzmine_Linux_portable.zip

      # UPLOAD ALL FILES
      - name: Upload windows builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_windows_msi_installer
          path: mzmine-community/build/jpackage/*.msi
          retention-days: 7  # store for 7 days
      - name: Upload windows portable builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_windows_portable
          path: mzmine-community/build/jpackage/mzmine_Windows_portable.zip
          retention-days: 7  # store for 7 days

      - name: Upload builds ubuntu deb
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_linux_deb_package
          path: mzmine-community/build/jpackage/*.deb
          retention-days: 7  # store for 7 days
      - name: Upload builds ubuntu rpm
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_linux_rpm_package
          path: mzmine-community/build/jpackage/*.rpm
          retention-days: 7  # store for 7 days
      - name: Upload linux portable builds
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_linux_portable
          path: mzmine-community/build/jpackage/mzmine_Linux_portable.zip
          retention-days: 7  # store for 7 days



      # for macOS:
      # 1. upload the dmg installer
      # 2. remove the dmg isntaller from path
      # 3. zip and upload the jpackage directory
      # This is needed because zipping of the /jpackage/mzmine.app portable version zips the content
      # of the folder not the folder itself
      - name: Setup node for macOS packaging
        if: runner.os == 'macOS'
        uses: actions/setup-node@v3  # To install appdmg

      - name: Pack macOS .app to .dmg
        if: runner.os == 'macOS'
        run: |
          npm install --python=python3.11 -g appdmg
          appdmg mzmine-community/gradle/appdmg.json mzmine-community/build/jpackage/mzmine_macOS_installer_academia.dmg

      - name: Upload macOS installer
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_macOS_installer_academia
          path: mzmine-community/build/jpackage/mzmine_macOS_installer_academia.dmg
          retention-days: 7  # store for 7 days

#      - name: Remove dmg File and Make .app executable
#        if: runner.os == 'macOS'
#        run: |
#          find ./build/jpackage/ -name '*.dmg' -delete
#          chmod a+x build/jpackage/mzmine.app/Contents/MacOS/mzmine
#      - name: Zip portable macos
#        if: runner.os == 'macOS'
#        uses: vimtor/action-zip@v1.2
#        with:
#          files: build/jpackage/
#          dest: build/jpackage/mzmine_macOS_portable.zip
#      - name: Upload macOS portable builds
#        if: runner.os == 'macOS'
#        uses: actions/upload-artifact@v4
#        with:
#          name: mzmine_macos_portable_academia
#          path: mzmine-community/build/jpackage/mzmine_macOS_portable.zip
#          retention-days: 7  # store for 7 days
