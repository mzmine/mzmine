name: PR Test Build

on:
  pull_request:
    branches: [ master ]

jobs:
  gradle_build:
    name: test and build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19.0.1'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

#      in PR, without signing
#      in push to master use signed version for macOS
      - name: Execute Gradle build (unsigned)
        run: ./gradlew --stacktrace --info

      # ZIP PORTABLE VERSIONS
      - name: Zip portable windows
        if: runner.os == 'Windows'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/MZmine/
          dest: build/jpackage/MZmine_Windows_portable.zip
      - name: Zip portable linux
        if: runner.os == 'Linux'
        uses: papeloto/action-zip@v1
        with:
          files: build/jpackage/MZmine/
          dest: build/jpackage/MZmine_Linux_portable.zip

      # UPLOAD ALL FILES
      - name: Upload windows builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_msi_installer
          path: build/jpackage/*.msi
          retention-days: 7  # store for 7 days
      - name: Upload windows portable builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_windows_portable
          path: build/jpackage/MZmine_Windows_portable.zip
          retention-days: 7  # store for 7 days

      - name: Upload builds ubuntu deb
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_deb_package
          path: build/jpackage/*.deb
          retention-days: 7  # store for 7 days
      - name: Upload builds ubuntu rpm
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_rpm_package
          path: build/jpackage/*.rpm
          retention-days: 7  # store for 7 days
      - name: Upload linux portable builds
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_linux_portable
          path: build/jpackage/MZmine_Linux_portable.zip
          retention-days: 7  # store for 7 days



      # for macOS:
      # 1. upload the dmg installer
      # 2. remove the dmg isntaller from path
      # 3. zip and upload the jpackage directory
      # This is needed because zipping of the /jpackage/MZmine.app portable version zips the content
      # of the folder not the folder itself
      - name: Setup node for macOS packaging
        if: runner.os == 'macOS'
        uses: actions/setup-node@v3  # To install appdmg

      - name: Pack macOS .app to .dmg
        if: runner.os == 'macOS'
        run: |
          npm install -g appdmg
          appdmg gradle/appdmg.json build/jpackage/MZmine_macOS_installer.dmg

      - name: Upload macOS installer
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macOS_installer
          path: build/jpackage/MZmine_macOS_installer.dmg
          retention-days: 7  # store for 7 days

#      - name: Remove dmg File and Make .app executable
#        if: runner.os == 'macOS'
#        run: |
#          find ./build/jpackage/ -name '*.dmg' -delete
#          chmod a+x build/jpackage/MZmine.app/Contents/MacOS/MZmine
#      - name: Zip portable macos
#        if: runner.os == 'macOS'
#        uses: papeloto/action-zip@v1
#        with:
#          files: build/jpackage/
#          dest: build/jpackage/MZmine_macOS_portable.zip
      - name: Upload macOS portable builds
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: MZmine_macos_portable
          path: build/jpackage/MZmine_macOS_portable.zip
          retention-days: 7  # store for 7 days