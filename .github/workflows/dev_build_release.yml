name: Development Build Release

on:
  push:
    branches: [ "master", "actions-test" ]
    paths-ignore:
      - 'mzmine-community/src/main/resources/mzmineversion.properties'

jobs:
  gradle_dev_build:
    name: test and build
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23.0.2'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      #      in push to master use signed version for macOS defined below
      - name: Execute Gradle build (unsigned)
        if: runner.os != 'macOS'
        run: ./gradlew -p mzmine-community --info --warning-mode all
        env:
          TESTRUNNER_USER: ${{ secrets.TESTRUNNER_USER }}

      # ZIP PORTABLE VERSIONS
      - name: Zip portable windows
        if: runner.os == 'Windows'
        uses: vimtor/action-zip@v1.2
        with:
          files: mzmine-community/build/jpackage/mzmine/
          dest: mzmine-community/build/jpackage/mzmine_Windows_portable.zip
      - name: Zip portable linux
        if: runner.os == 'Linux'
        uses: vimtor/action-zip@v1.2
        with:
          files: mzmine-community/build/jpackage/mzmine/
          dest: mzmine-community/build/jpackage/mzmine_Linux_portable.zip

      # UPLOAD ALL FILES
      - name: Upload windows builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_windows_msi_installer
          path: mzmine-community/build/jpackage/*.msi
          retention-days: 7  # store for 7 days
      - name: Upload windows portable builds
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_windows_portable
          path: mzmine-community/build/jpackage/mzmine_Windows_portable.zip
          retention-days: 7  # store for 7 days

      - name: Upload builds ubuntu deb
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_linux_deb_package
          path: mzmine-community/build/jpackage/*.deb
          retention-days: 7  # store for 7 days
      - name: Upload builds ubuntu rpm
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_linux_rpm_package
          path: mzmine-community/build/jpackage/*.rpm
          retention-days: 7  # store for 7 days
      - name: Upload linux portable builds
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_linux_portable
          path: mzmine-community/build/jpackage/mzmine_Linux_portable.zip
          retention-days: 7  # store for 7 days

      # for macOS:
      # Build, sign, notarize DMG, and create portable ZIP all happen in build.gradle
      - name: Setup node for macOS packaging
        if: runner.os == 'macOS'
        uses: actions/setup-node@v3  # Required for appdmg in Gradle build

      - name: Execute Gradle build on macOS (signed and notarized)
        if: runner.os == 'macOS'
        run: |
          echo "$MACOS_DEVELOPER_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p abc123 build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p abc123 build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_DEVELOPER_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k abc123 build.keychain
          ./gradlew -p mzmine-community --info --warning-mode all --stacktrace
        env:
          MACOS_DEVELOPER_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_CERTIFICATE }}
          MACOS_DEVELOPER_CERTIFICATE_PWD: ${{ secrets.MACOS_DEVELOPER_CERTIFICATE_PWD }}
          MACOS_APPLE_ID_PWD: ${{ secrets.MACOS_APPLE_ID_PWD }}
          MACOS_APP_IDENTITY_ID: ${{ secrets.MACOS_APP_IDENTITY_ID }}
          MACOS_APP_IDENTITY_TEAM_ID: ${{ secrets.MACOS_APP_IDENTITY_TEAM_ID }}
          TESTRUNNER_USER: ${{ secrets.TESTRUNNER_USER }}

      # DMG is now created, signed, and notarized in Gradle - just upload it
      - name: Upload macOS installer
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_macOS_installer_academia
          path: mzmine-community/build/jpackage/mzmine_macOS_installer_academia.dmg
          retention-days: 7  # store for 7 days

      - name: Upload macOS portable builds
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: mzmine_macos_portable_academia
          path: mzmine-community/build/jpackage/mzmine_macOS_portable_academia.zip
          retention-days: 7  # store for 7 days

  # release dev version
  release_dev:
    name: Release dev version
    needs: gradle_dev_build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4 # download all artifacts
        with:
          path: build/
      - name: Create development release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN}}"
          prerelease: true
          title: "Latest Development Build"
          automatic_release_tag: "Development-release"
          files: build/*/*

  # bump up patch if dev release finished
  increment_patch:
    name: Increment patch version
    needs: release_dev
    if: ${{ !startsWith(github.ref, 'refs/tags/') }} # only increment if not a tag push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.MZMINE_BOT_ACTIONS_TOKEN }}
          
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23.0.2'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
      - name: Execute Gradle to increment version
        run: ./gradlew incrementPatch
      - name: Commit updated patch version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Increment patch version
          branch: master

