/*
 * Copyright (c) 2004-2025 The mzmine Development Team
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

package io.github.mzmine.modules.io.import_rawdata_waters;/*
 * Copyright (c) 2004-2025 The mzmine Development Team
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

import com.google.common.collect.Range;
import io.github.mzmine.datamodel.MassSpectrumType;
import io.github.mzmine.datamodel.MetadataOnlyScan;
import io.github.mzmine.datamodel.PolarityType;
import io.github.mzmine.datamodel.impl.DDAMsMsInfoImpl;
import io.github.mzmine.datamodel.impl.DIAImsMsMsInfoImpl;
import io.github.mzmine.datamodel.impl.builders.SimpleBuildingScan;
import io.github.mzmine.datamodel.msms.ActivationMethod;
import io.github.mzmine.datamodel.msms.DIAMsMsInfoImpl;
import io.github.mzmine.datamodel.msms.MsMsInfo;
import java.lang.foreign.MemorySegment;

/**
 * This record was automatically generated by LayoutToRecordGenerator.
 */

public record ScanInfoWrapper(int msLevel, int polarity, int driftScanCount, int isProfile,
                              float precursorMz, float quadIsolationStart, float quadIsolationEnd,
                              float collisionEnergy, float rt, float laserXPos, float laserYPos) {

  public static ScanInfoWrapper fromScanInfo(final MemorySegment scanInfo) {
    return new ScanInfoWrapper(ScanInfo.msLevel(scanInfo), ScanInfo.polarity(scanInfo),
        ScanInfo.driftScanCount(scanInfo), ScanInfo.isProfile(scanInfo),
        ScanInfo.precursorMz(scanInfo), ScanInfo.quadIsolationStart(scanInfo),
        ScanInfo.quadIsolationEnd(scanInfo), ScanInfo.collisionEnergy(scanInfo),
        ScanInfo.rt(scanInfo), ScanInfo.laserXPos(scanInfo), ScanInfo.laserYPos(scanInfo));
  }

  public PolarityType polarityType() {
    return PolarityType.fromInt(polarity);
  }

  public MetadataOnlyScan metadataOnlyScan() {
    return new SimpleBuildingScan(0, msLevel, polarityType(), isProfile > 0 ? MassSpectrumType.PROFILE : MassSpectrumType.CENTROIDED, rt, precursorMz,
        0);
  }

  public MsMsInfo msMsInfo(boolean isDda, boolean isIms) {
    final Float collisionEnergy =
        Float.compare(collisionEnergy(), MassLynxConstants.NO_COLLISION_ENERGY) == 0 ? null
            : collisionEnergy();
    final Float isolationLower =
        Float.compare(quadIsolationStart(), MassLynxConstants.NO_QUAD_ISOLATION) == 0
            || Float.compare(quadIsolationStart(), 0f) == 0 ? null : quadIsolationStart();
    final Float isolationUpper =
        Float.compare(quadIsolationEnd(), MassLynxConstants.NO_QUAD_ISOLATION) == 0
            || Float.compare(quadIsolationEnd(), 0f) == 0 ? null : quadIsolationEnd();
    final Range<Double> mzIsolationWindow =
        isolationLower != null && isolationUpper != null ? Range.closed((double) isolationLower,
            (double) isolationUpper) : null;

    if (isDda) {
      return new DDAMsMsInfoImpl(precursorMz(), null, collisionEnergy, null, null, msLevel(),
          ActivationMethod.CID, mzIsolationWindow);
    } else {
      if (!isIms) {
        return new DIAMsMsInfoImpl(collisionEnergy, null, msLevel, ActivationMethod.CID,
            mzIsolationWindow);
      } else {
        return new DIAImsMsMsInfoImpl(null, collisionEnergy, null, mzIsolationWindow);
      }
    }
  }
}
