/*
 * Copyright (c) 2004-2024 The mzmine Development Team
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */


import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.CsvReportRenderer
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.render.JsonReportRenderer
import org.gradle.internal.os.OperatingSystem

import java.nio.file.FileSystems
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.StandardCopyOption
import java.util.function.Consumer

plugins {
    id("io.github.mzmine.java-app-conv")
    id("io.github.mzmine.javafx-conv")
    alias(libs.plugins.beryx.runtime)

    // versioning now in version.properties file
    // https://github.com/ethauvin/semver-gradle
    alias(libs.plugins.semver)
    alias(libs.plugins.licensereport)

    id("maven-publish")
    id("version-catalog")
}

// save version to main resources
// version bump by .\gradlew incrementPatch ... incrementMinor
// gradle -Dversion.prerelease=beta incrementPatch
// version with -beta is currently not supported by jpackage (maybe windows --app-version)
// java.lang.IllegalArgumentException: "Version [3.0.0-beta] contains invalid component [0-beta]"
semver {
    def versionFile = getLayout().getProjectDirectory().dir("src/main/resources").file("mzmineversion.properties").getAsFile()
    properties = versionFile.toString()
}

catalog {
    versionCatalog {
        from(files("$rootDir/gradle/libs.versions.toml"))
    }
}

// version is now in version.properties
group = "io.github.mzmine"
description = "mzmine"

project.ext.appName = "mzmine"

defaultTasks "test", "jpackage", "notarizeApp"

// Check the OS
project.ext.osSuffix = OperatingSystem.current().getName().replaceAll(" ", "_")
if (OperatingSystem.current().isLinux()) project.ext.osSuffix = "Linux"
if (OperatingSystem.current().isWindows()) project.ext.osSuffix = "Windows"
if (OperatingSystem.current().isMacOsX()) {
    project.ext.osSuffix = "macOS"
    project.ext.appleID = "ansgar.korf@mzio.io"

    getLogger().lifecycle('Checking macOS system variables...')

    project.ext.macSigning = true
    project.ext.developerID = System.getenv("MACOS_APP_IDENTITY_ID")
    if (developerID == null || developerID.isBlank()) {
        getLogger().warn('System variable MACOS_APP_IDENTITY_ID is not set for signing.')
        project.ext.macSigning = false
    }
    project.ext.appleIDPassword = System.getenv("MACOS_APPLE_ID_PWD")
    if (appleIDPassword == null || appleIDPassword.isBlank()) {
        getLogger().warn('System variable MACOS_APPLE_ID_PWD is not set for signing.')
        project.ext.macSigning = false
    }
    project.ext.appleTeamID = System.getenv("MACOS_APP_IDENTITY_TEAM_ID")
    if (appleTeamID == null || appleTeamID.isBlank()) {
        getLogger().warn('System variable MACOS_APP_IDENTITY_TEAM_ID is not set for signing.')
        project.ext.macSigning = false
    }

    project.ext.imageDir = layout.buildDirectory.dir('jpackage/mzmine.app').get().asFile.toPath()
    project.ext.jarsDir = imageDir.resolve('Contents').resolve('app')

    getLogger().info("imageDir " + imageDir)
    getLogger().info("jarsDir " + jarsDir)

}
println "OS detected as " + project.ext.osSuffix

//getLogger().info("build dir " + layout.buildDirectory)
//getLogger().info("project dir " + layout.projectDirectory)
//getLogger().info("build dir jpack fileget " + layout.buildDirectory.file("jpackage").get())
//getLogger().info("build dir jpack file " + layout.buildDirectory.file("jpackage"))
//getLogger().info("build dir jpack2 " + layout.buildDirectory.dir("jpackage").get())
//getLogger().info("build dir jpack3 " + layout.buildDirectory.dir("jpackage").get().asFile)
//getLogger().info("build dir jpackpath " + layout.buildDirectory.dir("jpackage").get().asFile.path)

repositories {

    mavenCentral()
    // mavenLocal()
    maven { url = "https://repo.maven.apache.org/maven2" }
    // local libraries
    maven { url = uri("file://" + layout.projectDirectory.dir("../local-repo")) }
    // For jmzml, etc.
    maven { url = "https://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/" }
    // For SIRIUS ID modules
    maven { url = "https://bio.informatik.uni-jena.de/repository/libs-oss/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://www.xypron.de/repository/" }
    // For cpdetector
//    maven { url = "https://nexus.nuiton.org/nexus/content/groups/releases/" }
    // For jimzml
    // maven { url = "https://mvnrepository.com/artifact/com.alanmrace/jimzmlparser" }
}

ext {
    msdkVersion = "0.0.27"
    cdkVersion = "2.5"
    swaggerVersion = "1.5.22"
    okhttpVersion = "2.7.5"
    guavaVersion = "30.1-jre"
    slf4jVersion = '1.7.32'
    poiVersion = '5.0.0'
    batikVersion = '1.14'
    controlsfxVersion = '11.1.1'
    jmzTabmVersion = "1.0.6"
    jnaVersion = '5.12.1'
    junitversion = '5.9.1'
    mockitoversion = '5.8.0'
    jacksonVersion = '2.16.1'

    // UUID for upgrades of this package on Windows. Generated by https://www.uuidgenerator.net 
    win_uuid = "896e9c2d-6db8-4259-a1af-1b5f8112d1e1"
}

dependencies {
    // local dependencies - publish
    implementation(libs.bundles.mzio)
    // same project
    implementation(project(":utils"))
    implementation(project(":taskcontroller"))
    implementation(project(":javafx-framework"))
    // mzmine version parsing
    implementation(libs.semver4j)
//    implementation "org.graphstream:gs-core:2.0"
    // use patched version via jitpack from https://github.com/robinschmid/gs-core/tree/patch-1
    implementation(libs.guava)
//    implementation(libs.commons.math) // remove at some point?
    implementation(libs.commons.math3)
    implementation(libs.commons.cli)
    implementation(libs.commons.io)
    implementation(libs.commons.lang3)
    implementation(libs.commons.compress)
    implementation(libs.fastutil)
    implementation(libs.bundles.djl.pytorch)
    implementation "edu.ucar:netcdf4:4.5.5"
    implementation 'org.jetbrains:annotations:22.0.0'
    implementation 'net.sourceforge.jmol:jmol:14.31.10'

    implementation(libs.bundles.jfreechart)
    // search icons here
//    https://kordamp.org/ikonli/cheat-sheet-bootstrapicons.html
    implementation(libs.bundles.ikonli)
    implementation(libs.bundles.graphstream)
    implementation(libs.bundles.slf4j)
    implementation(libs.bundles.poi)
    implementation(libs.bundles.cdk)
    implementation(libs.bundles.msdk)
    implementation(libs.bundles.batik)
    implementation(libs.bundles.okhttp)
    implementation "org.postgresql:postgresql:9.3-1102-jdbc41"
    implementation "org.freehep:freehep-graphicsio-emf:2.4"
    implementation("eu.hansolo.fx:charts:21.0.7")
    implementation group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'
    implementation 'org.eclipse.parsson:jakarta.json:1.1.0'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'

//    implementation "org.du-lab.adap:adap:4.1.10"
    implementation 'org.xerial:sqlite-jdbc:3.41.2.2'

    implementation 'com.github.librepdf:openpdf:2.0.0'
    implementation "com.miglayout:miglayout:3.7.4"

    implementation "javax.activation:javax.activation-api:1.2.0"
    implementation "javax.mail:javax.mail-api:1.6.2"
    implementation "io.swagger:swagger-annotations:$swaggerVersion"
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation "org.threeten:threetenbp:1.3.8"
    implementation 'org.json:json:20211205'
    implementation "com.github.oshi:oshi-core:4.5.2"
    // because the version that is pulled by SIRIUS crashes
    implementation "de.isas.mztab:jmztabm-io:$jmzTabmVersion"
    implementation(libs.opencsv)

    implementation 'net.java.dev.jna:jna:$jnaVersion'
    //implementation 'com.github.robinschmid:jimzMLParser:mzmine_local_obo-SNAPSHOT'
    //implementation 'com.github.alanrace:jimzMLParser:1.0.6'
    implementation group: 'com.alanmrace', name: 'jimzmlparser', version: '1.0.3'
    implementation "com.github.yannrichet:JMathPlot:1.0.1"
    implementation "de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2"

    // jackson for json parsing
    implementation(libs.bundles.jackson)
    // the defacto standard parser in jackson?
    implementation(libs.woodstox.core)
    implementation(libs.aalto.xml)

    // test only
    testImplementation(libs.bundles.mzio.test)
}

/*
 * Remove the xml-apis dependencies to avoid a compilation error in Eclipse.
 * The org.w3c.dom package is present in the java.xml module as well as in these dependencies.
 * That is illegal (https://bugs.eclipse.org/bugs/show_bug.cgi?id=536928).
 */
configurations.all {
    exclude group: "xml-apis", module: "xml-apis"
    exclude group: "xml-apis", module: "xml-apis-ext"
    exclude group: "xom", module: "xom"
    exclude group: "ch.qos.logback", module: "logback-core"
    exclude group: "ch.qos.logback", module: "logback-classic"
    exclude group: "gurobi", module: "gurobi-linux64"
    exclude group: "cplex", module: "cplex"
    exclude group: "org.checkerframework", module: "checker-qual"
    exclude group: "javax.annotation", module: "javax.annotation-api"
    exclude group: "log4j", module: "log4j"  // exclude from ADAP packages old version
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs += ['--enable-preview']
}

tasks.withType(Test) {
    jvmArgs = [
            "--enable-preview"
    ]
    useJUnitPlatform()

    // Below can be added for extensive logs to debug failing tests
//    beforeTest { descriptor ->
//        logger.lifecycle("Running test: " + descriptor)
//    }
    // fail the 'test' task on the first test failure
//    failFast = true
    // listen to standard out and standard error of the test JVM(s)
//    onOutput { descriptor, event ->
//        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
//    }
}

tasks.withType(JavaExec) {
    jvmArgs += '--enable-preview'
}

/*
 * Set the basic Java runtime parameters (heap size etc.)
 */
application {
    mainClass.set("io.github.mzmine.main.MZmineCore")
    applicationName = "mzmine"
    applicationDefaultJvmArgs = [
            // https://github.com/controlsfx/controlsfx/wiki/Using-ControlsFX-with-JDK-9-and-above
            "--add-exports=javafx.base/com.sun.javafx.event=org.controlsfx.controls",
            "--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls",
            "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls",
            "--add-opens=javafx.controls/javafx.scene.control.skin=org.controlsfx.controls",
            "--add-exports=javafx.graphics/com.sun.javafx.css=org.controlsfx.controls",
            "--add-opens=javafx.controls/javafx.scene.control.skin=org.controlsfx.controls",
            "--add-exports=javafx.graphics/com.sun.javafx.scene=org.controlsfx.controls",
            "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls",
            "--add-opens=javafx.controls/javafx.scene.control.skin=org.controlsfx.controls",

            // logging
            "-Djava.util.logging.config.class=io.github.mzmine.main.MZmineLoggingConfiguration"
    ]
}

def EXTERNAL_TOOLS_DESTINATION =
        !OperatingSystem.current().isMacOsX() ? getLayout().getBuildDirectory().dir("jpackage/mzmine/external_tools").get()
                : getLayout().getBuildDirectory().dir("jpackage/mzmine.app/Contents/external_tools").get()
def EXTERNAL_TOOLS_SRC = getLayout().getProjectDirectory().dir("../external_tools")
tasks.jpackage.doFirst {
    copy {
        from EXTERNAL_TOOLS_SRC
        into EXTERNAL_TOOLS_DESTINATION
    }
}

/*
 * Build the JVM runtime using jlink
 */
runtime {
    options = ["--compress", "2", "--vm=server", "--no-header-files", "--no-man-pages", "--output", "jre/jre"]
    modules = ["java.desktop",
               "java.logging",
               "java.net.http",
               "java.rmi",
               "java.sql",
               "java.datatransfer",
               "java.management",
               "java.xml",
               "java.xml.crypto",
               "jdk.xml.dom",
               "java.naming",
               "java.transaction.xa",
               "java.scripting",
               "java.compiler",
               "jdk.jsobject",
               "jdk.jfr",
               "java.security.sasl",
               "java.security.jgss",
               "jdk.unsupported",
               "jdk.unsupported.desktop"]
    jpackage {
        if (OperatingSystem.current().isWindows()) {
            // The WiX toolset must be installed, see https://wixtoolset.org/releases/
            installerType = "msi"
            installerName = "mzmine_Windows_installer"
            // additional options for jpackage
            imageOptions = ["--icon", "src/main/resources/mzmineIcon.ico",
                            "--add-launcher", "mzmine_console=gradle/win_console_launcher.properties"
            ]
            installerOptions = [
                    "--vendor", "mzio GmbH",
                    "--win-menu",
                    "--win-menu-group", appName,
                    "--win-shortcut",
                    "--win-dir-chooser",
                    "--win-upgrade-uuid", "$win_uuid",
//                  "--license-file", "LICENSE.txt"  not required
            ]
        }
        if (OperatingSystem.current().isMacOsX()) {
//            installerType = "dmg"
            skipInstaller = true // no installer for macOS as we are generating it in GitHub action
            // additional options for jpackage
            // only sign if all needed information is present
            if (!macSigning) {
                imageOptions = [
                        "--vendor", "mzio GmbH",
                        "--icon", "src/main/resources/mzmineIcon.icns"
                ]
//                installerOptions = ["--license-file", "LICENSE.txt"] not required
                installerOptions = []
            } else {
                imageOptions = [
                        "--icon", "src/main/resources/mzmineIcon.icns",
                        "--mac-sign",
                        "--mac-package-name", appName,
                        "--mac-package-identifier", "io.github.mzmine.main",
                        "--mac-signing-key-user-name", developerID,
                        "--verbose"
                ]
                installerOptions = [
//                        "--license-file", "LICENSE.txt", not required
"--mac-sign",
"--mac-signing-key-user-name", developerID,
                ]
            }
            installerName = "mzmine_macOS_installer-academia"
        }
        if (OperatingSystem.current().isLinux()) {
            // leave installer type empty to generate all that match
            // for rpm, rpmbuild and rpm tools need to be installed, installerType needs to be set to "rpm"
            // installerType = "deb"
            // additional options for jpackage
            imageOptions = ["--icon", "src/main/resources/mzmineIcon.png"]
            installerOptions = [
                    "--vendor", "mzio GmbH",
                    "--linux-package-name", appName,
                    "--linux-shortcut",
                    "--linux-menu-group", appName,
//                  "--license-file", "LICENSE.txt", not required
                    "--linux-deb-maintainer", "plusik@gmail.com"
            ]

            installerName = "mzmine_Linux_installer"
        }
        imageName = appName
        jvmArgs = ["-showversion",
                   "-XX:MinHeapFreeRatio=50",
                   "-XX:MaxHeapFreeRatio=75",
                   "-XX:InitialRAMPercentage=5",
                   "-XX:MinRAMPercentage=75",
                   "-XX:MaxRAMPercentage=80",
                   "-enableassertions",
                   "-Djava.util.logging.config.class=io.github.mzmine.main.MZmineLoggingConfiguration",
                   "-Djava.net.useSystemProxies=true",
                   "--enable-preview",
        ]
    }
}

task signApp(dependsOn: jpackage) {

    if (OperatingSystem.current().isMacOsX() && macSigning) {

        doLast {
            Path entitlementsPth = layout.projectDirectory.dir('gradle/macos.entitlements').asFile.toPath()
            getLogger().info("imageDir " + imageDir)
            getLogger().info("jarsDir " + jarsDir)
            getLogger().info("jarsDir file " + jarsDir.toFile())
            getLogger().info("entitlementsPth " + entitlementsPth)

            // Define codesign command
            Consumer<Path> codesign = (Path p) -> exec {
                commandLine(["codesign", "--deep", "--force", "--timestamp", "-s", "${developerID}", "--options",
                             "runtime", "--entitlements", "${entitlementsPth}", "-f", "-v", "${p}"])
            }

            getLogger().lifecycle('Deleting unused "non-notarizable" libraries...')

            // Delete unused dependencies of dependencies causing notarization issues
            jarsDir.toFile().listFiles((FilenameFilter) ((d, n) -> n.startsWith('netlib') || n.startsWith('jblas')
                    || n.startsWith('jocl'))).stream().forEach(File::delete)

            // unzip previously done for internal parser
//            String mzmineJarName = "mzmine-community-${semver.version}"
//            exec { commandLine(['sh', '-c', "cd ${jarsDir} && unzip -q ${mzmineJarName}.jar -d ${mzmineJarName}"]) }

            getLogger().lifecycle("Signing native libraries...")

            // Traverse over whole .app and sign each native library
            for (Path nativeLib : Files.find(imageDir, 999, (p, bfa)  // 999 is a recursive depth
                    -> bfa.isRegularFile() && p.getFileName().toString().matches(".*\\.dylib|.*\\.so|.*\\.dll|.*\\.a|.*\\.lib"))) {
                getLogger().lifecycle("Signing native lib '${nativeLib}'")
                codesign(nativeLib.toAbsolutePath())
            }


            getLogger().lifecycle("Signing libraires nested in jars...")

            // Define native libraries nested in jars that are to be signed
            ArrayList<Path> jarNestedLibs = [
                    FileSystems.newFileSystem(jarsDir.resolve("jna-inchi-darwin-x86-64-1.2.jar")).getPath("darwin-x86-64/libjnainchi.dylib"),
                    FileSystems.newFileSystem(jarsDir.resolve("jna-inchi-darwin-aarch64-1.2.jar")).getPath("darwin-aarch64/libjnainchi.dylib"),
                    /*FileSystems.newFileSystem(jarsDir.resolve("adap-4.1.10.jar")).getPath("lib/macosx-x86_64/libadapwavelet.so"),*/
            ]

            // Move each library out of .jar, sign it, and put it back
            Path tmpJarsDir = layout.buildDirectory.dir("tmp/jarLibs").get().asFile.toPath()
            Files.createDirectories(tmpJarsDir)
            for (Path inJar : jarNestedLibs) {
                Path tmpPath = tmpJarsDir.resolve(inJar.getFileName().toString())
                Files.copy(inJar, tmpPath, StandardCopyOption.REPLACE_EXISTING)
                codesign(tmpPath.toAbsolutePath())
                Files.copy(tmpPath, inJar, StandardCopyOption.REPLACE_EXISTING)
                inJar.fileSystem.close()
            }

            getLogger().lifecycle("Signing jars...")

            // Traverse over entire .app and sign each .jar
            for (Path jar : Files.find(imageDir, 999, (p, bfa)  // 999 is a recursive depth
                    -> bfa.isRegularFile() && p.getFileName().toString().matches(".*\\.jar"))) {
                getLogger().lifecycle("Signing jar '${jar}'")
                codesign(jar.toAbsolutePath())
            }

            // delete duplicated libs
            //jarsDir.resolveSibling('runtime/Contents/MacOS').resolve("libjli.dylib").toFile().delete()

            // Sign .app directory
            getLogger().lifecycle("Signing .app directory...")
            codesign(imageDir)

            getLogger().lifecycle("Zipping .app directory...")
            exec {
                commandLine(['sh', '-c', "cd ${layout.buildDirectory.dir("jpackage").get()} " +
                        "&& zip -rq mzmine_macOS_portable_academia.zip mzmine.app"])
            }
        }
    }
}

task notarizeApp(dependsOn: signApp) {

    if (OperatingSystem.current().isMacOsX() && macSigning && false) {

        doLast {

            getLogger().lifecycle("Notarizing .app...")

            ExecResult execResult = exec {
                commandLine(["xcrun", "notarytool", "submit", "--wait", "--apple-id", "${appleID}",
                             "--password", "${appleIDPassword}", "--team-id", "${appleTeamID}",
                             "${layout.buildDirectory.dir("jpackage/mzmine_macOS_portable.zip").get()}"])
            }
            int returnCode = execResult.getExitValue()
            if (returnCode != 0) {
                throw new GradleException("Error ${returnCode} during notarization.")
            }

            getLogger().lifecycle("Stapling .app...")

            execResult = exec {
                commandLine(["xcrun", "stapler", "staple", "${imageDir}"])
            }
            returnCode = execResult.getExitValue()
            if (returnCode != 0) {
                throw new GradleException("Error ${returnCode} during stapling.")
            }
        }
    }
}
notarizeApp.mustRunAfter(signApp)

/*
 * This is important in order to copy all .java, .fxml, and help files into the final MZmine jar.
 * The .java files are only for people who want to check the source codes.
 * But the .fxml and help files are required for the GUI.
 */
jar {
    sourceSets.main.resources.srcDirs += ["src/main/java"]
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task copyTestResources(type: Copy) {
    from layout.projectDirectory.dir("src/test/resources")
    into layout.buildDirectory.dir("classes/test")
}
processTestResources.dependsOn copyTestResources

licenseReport {
    // By default this plugin will collect the union of all licenses from
    // the immediate pom and the parent poms. If your legal team thinks this
    // is too liberal, you can restrict collected licenses to only include the
    // those found in the immediate pom file
    // Defaults to: true
    unionParentPomLicenses = true

    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = getLayout().getBuildDirectory().get().dir("licensereport")
//    outputDir = getLayout().getProjectDirectory().dir("licensereport")

    // Adjust the configurations to fetch dependencies. Default is 'runtimeClasspath'
    // For Android projects use 'releaseRuntimeClasspath' or 'yourFlavorNameReleaseRuntimeClasspath'
    // Use 'ALL' to dynamically resolve all configurations:
    // configurations = ALL
    configurations = ['runtimeClasspath']

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    excludes = ['com.fasterxml.jackson:jackson-bom', // apache 2.0 https://github.com/FasterXML/jackson-bom?tab=Apache-2.0-1-ov-file#readme
                'com.alanmrace:jimzmlparser', // no license provided
                'colt:colt', // https://dst.lbl.gov/ACSSoftware/colt/license.html (CERN license, permissive)
                'com.github.yannrichet:JMathArray', 'com.github.yannrichet:JMathPlot', 'com.github.yannrichet:JMathIO', // BSD 2-Clause
                'net.jcip:jcip-annotations', // Creative Commons Attribution License
                'io.mzio(.*)',
                'org.openjfx.(.*)',
    ]

    // Don't exclude bom dependencies.
    // If set to true, then all boms will be excluded from the report
    excludeBoms = false

    filters = [new LicenseBundleNormalizer(bundlePath: "$projectDir/config/license-normalizer-bundle.json")]
    renderers = [new JsonReportRenderer("licenses.json"), new CsvReportRenderer("licenses.csv"),
                 new InventoryHtmlReportRenderer('licenses.html', 'Licenses')]

    allowedLicensesFile = new File("$projectDir/config/allowed-licenses.json")

    // if a project contains a dependency we are not allowed to use, we can use
    // "gradlew mzmine-community:dependencies" to generate a dependency graph
}
tasks.register('copyLicenseInformationToResources', Copy) {
    outputs.upToDateWhen { false }
    mustRunAfter(checkLicense)
    from(getLayout().getBuildDirectory().get().dir("/licensereport"))
    into(getLayout().getProjectDirectory().dir("/src/main/resources/dependency/"))
    include("project-licenses-for-check-license-task.json")
    rename("project-licenses-for-check-license-task.json", "dependency-licenses.json")
}
tasks.register('copyLicenseInformationToBuild', Copy) {
    outputs.upToDateWhen { false }
    mustRunAfter(checkLicense)
    from(getLayout().getBuildDirectory().get().dir("/licensereport"))
    into(getLayout().getBuildDirectory().get().dir("/resources/main/dependency/"))
    include("project-licenses-for-check-license-task.json")
    rename("project-licenses-for-check-license-task.json", "dependency-licenses.json")
}

// compileJava does not actually depend on this but we want to fail the build if there are invalid licenses
tasks.compileJava.dependsOn(checkLicense, copyLicenseInformationToResources, copyLicenseInformationToBuild)
// copying must be finished before packaging
tasks.processResources.dependsOn(copyLicenseInformationToResources, copyLicenseInformationToBuild)
tasks.processResources.dependsOn(copyLicenseInformationToResources, copyLicenseInformationToBuild)


// make sure the publish action is run after the semver plugin has been evaluated,
// otherwise the version will always be 1.0.0
afterEvaluate {
    publishing {
        publications {
            register("mzmine-community-package", MavenPublication) {
                from(components["java"])
                pom {
                    name = "mzmine-community"
                    description = "mzmine-community"
                    artifactId = "mzmine-community"
                    url = "https://github.com/mzmine/mzmine"
                    version = semver.version
                    developers {
                        developer {
                            id = "mzmine"
                            name = "mzmine"
                        }
                    }
                }
            }

            register("versionCatalog", MavenPublication) {
                from(components["versionCatalog"])
                version = semver.version
                artifactId = 'mzmine-community-version-catalog'
                // This is important so the published artifact registers as a .toml file, rather than a library
            }
        }
    }
}
