/*
 *  Copyright 2006-2020 The MZmine Development Team
 *
 *  This file is part of MZmine.
 *
 *  MZmine is free software; you can redistribute it and/or modify it under the terms of the GNU
 *  General Public License as published by the Free Software Foundation; either version 2 of the
 *  License, or (at your option) any later version.
 *
 *  MZmine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
 *  the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
 *  Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with MZmine; if not,
 *  write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
 *  USA
 */

package io.github.mzmine.datamodel.impl.masslist;

import com.google.common.collect.Range;
import com.google.common.collect.Streams;
import io.github.mzmine.datamodel.DataPoint;
import io.github.mzmine.datamodel.MassList;
import io.github.mzmine.datamodel.MassSpectrum;
import io.github.mzmine.datamodel.MassSpectrumType;
import io.github.mzmine.modules.dataprocessing.featdet_massdetection.MassDetector;
import io.github.mzmine.parameters.ParameterSet;
import io.github.mzmine.util.MemoryMapStorage;
import java.util.Collection;
import java.util.Iterator;
import java.util.stream.Stream;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

/**
 * This class has no public constructor because it shall only be generated by {@link
 * FrameMassList#generateMobilityScanMassLists(Collection, MemoryMapStorage, MassDetector,
 * ParameterSet)} itself.
 */
public class MobilityScanMassList implements MassList {

  private final int storageOffset;
  private final int numDataPoints;
  private final int basePeakIndex;
  private final FrameMassList frameMassList;

  /**
   * @param offset
   * @param numDataPoints
   * @param basePeakIndex
   * @param frameMassList
   */
  protected MobilityScanMassList(int offset, int numDataPoints, int basePeakIndex,
      FrameMassList frameMassList) {
    this.storageOffset = offset;
    this.numDataPoints = numDataPoints;
    this.basePeakIndex = basePeakIndex;
    this.frameMassList = frameMassList;
  }

  @Override
  public int getNumberOfDataPoints() {
    return numDataPoints;
  }

  @Override
  public MassSpectrumType getSpectrumType() {
    return MassSpectrumType.CENTROIDED;
  }

  @Override
  public double[] getMzValues(@Nonnull double[] dst) {
    if (dst.length < getNumberOfDataPoints()) {
      dst = new double[getNumberOfDataPoints()];
    }
    frameMassList.getMobilityScanMzValues(this, dst);
    return dst;
  }

  @Override
  public double[] getIntensityValues(@Nonnull double[] dst) {
    if (dst.length < getNumberOfDataPoints()) {
      dst = new double[getNumberOfDataPoints()];
    }
    frameMassList.getMobilityScanIntensityValues(this, dst);
    return dst;
  }

  @Override
  public double getMzValue(int index) {
    if (index >= getNumberOfDataPoints()) {
      throw new AssertionError("index >= number of data points in this mass list.");
    }
    return frameMassList.getMobilityScanMzValue(this, index);
  }

  @Override
  public double getIntensityValue(int index) {
    if (index >= getNumberOfDataPoints()) {
      throw new AssertionError("index >= number of data points in this mass list.");
    }
    return frameMassList.getMobilityScanIntensityValue(this, index);
  }

  @Nullable
  @Override
  public Double getBasePeakMz() {
    if (basePeakIndex == -1) {
      return null;
    }
    return getMzValue(basePeakIndex);
  }

  @Nullable
  @Override
  public Double getBasePeakIntensity() {
    if (basePeakIndex == -1) {
      return null;
    }
    return getIntensityValue(basePeakIndex);
  }

  @Nullable
  @Override
  public Integer getBasePeakIndex() {
    if (basePeakIndex == -1) {
      return null;
    }
    return basePeakIndex;
  }

  @Nullable
  @Override
  public Range<Double> getDataPointMZRange() {
    return Range.closed(getMzValue(0), getMzValue(numDataPoints - 1));
  }

  @Nullable
  @Override
  public Double getTIC() {
    throw new UnsupportedOperationException("Intentionally unimplemented to safe RAM.");
  }

  public int getStorageOffset() {
    return storageOffset;
  }

  @Override
  public Iterator<DataPoint> iterator() {
    return new DataPointIterator(this);
  }

  @Override
  public Stream<DataPoint> stream() {
    return Streams.stream(this);
  }

  private class DataPointIterator implements Iterator<DataPoint>, DataPoint {

    private final MassSpectrum spectrum;
    // We start at -1 so the first call to next() moves us to index 0
    private int cursor = -1;

    DataPointIterator(MassSpectrum spectrum) {
      this.spectrum = spectrum;
    }

    @Override
    public boolean hasNext() {
      return (cursor + 1) < spectrum.getNumberOfDataPoints();
    }

    @Override
    public DataPoint next() {
      cursor++;
      return this;
    }

    @Override
    public void remove() {
      throw new UnsupportedOperationException();
    }

    @Override
    public double getMZ() {
      return spectrum.getMzValue(cursor);
    }

    @Override
    public double getIntensity() {
      return spectrum.getIntensityValue(cursor);
    }

  }
}
